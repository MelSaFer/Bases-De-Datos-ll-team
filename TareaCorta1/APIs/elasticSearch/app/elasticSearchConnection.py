""" from elasticsearch import Elasticsearch

# Password for the 'elastic' user generated by Elasticsearch


# Create the client instance
client = Elasticsearch(
    ELASTIC_HTTP,
    ca_certs="/path/to/http_ca.crt",
    basic_auth=("elastic", ELASTIC_PASSWORD)
)

# Successful response!
client.info() """

import os
from elasticsearch import Elasticsearch
from elasticsearch.exceptions import ConnectionError
import json
from flask import Flask
from flask_restful import Api, Resource
import csv
import random

app = Flask(__name__)
api = Api(app)

# Password for the 'elastic' user generated by Elasticsearch
ESENDPOINT=os.getenv('ESENDPOINT')
ESPASSWORD=os.getenv('ESPASSWORD')
ESINDEX=os.getenv('ESINDEX')


#Lista de datos extraídos del csv
data = []

def csvReader():
    with open('../babynames.csv', newline='') as archivo:
        lector_csv = csv.reader(archivo, delimiter=',', quotechar='"')
        counter = 0
        
        for fila in lector_csv:
            counter += 1
            data.append(fila)
            if counter >= 5000:
                break


class BabyName(Resource):
    def get(self):
        try:
            client = Elasticsearch("http://"+ESENDPOINT+":9200", basic_auth=("elastic", ESPASSWORD), verify_certs=False)
            resp = client.search(index=ESINDEX, body={'query': {'match_all': {}}})
            return {'data': resp}
        except:
            return {'status': 'failed'}
    
    def post(self):
        try:
            args = random.choice(data)
            selectedData = {"birthyear":args[0],
                            "gender":str(args[1]),
                            "ethnicity":str(args[2]),
                            "name":str(args[3]),
                            "cnt": args[4],
                            "rnk": args[5]}
            
            json_data = json.dumps(selectedData)
            client = Elasticsearch("http://"+ESENDPOINT+":9200", basic_auth=("elastic", ESPASSWORD), verify_certs=False)
            resp = client.index(index=ESINDEX, document=json_data)

            return {'status': 'insertion successful', 'data': json_data}
        except Exception as e:
            return {'status': str(e)}
    
    def put(self):
        try:
            args = random.choice(data)
            selectedData = {"birthyear":args[0],
                            "gender":str(args[1]),
                            "ethnicity":str(args[2]),
                            "name":str(args[3]),
                            "cnt": args[4],
                            "rnk": args[5]}
            
            json_data = json.dumps(selectedData)
            client = Elasticsearch("http://"+ESENDPOINT+":9200", basic_auth=("elastic", ESPASSWORD), verify_certs=False)
            
            result = client.search(index=ESINDEX, body={
                "query": {
                    "match_all": {}
                },
                "fields": ["_id"]
            })

            doc_ids = [hit["_id"] for hit in result["hits"]["hits"]]

            randomId = random.choice(doc_ids)
            resp = client.update(index=ESINDEX, id=randomId, document=json_data)

            return {'status': 'update successful','id': randomId, 'data': json_data}
        except Exception as e:
            return {'status': str(e)}

    def delete(self):
        try:
        # Eliminar un registro de la tabla
            client = Elasticsearch("http://"+ESENDPOINT+":9200", basic_auth=("elastic", ESPASSWORD), verify_certs=False)
            
            result = client.search(index=ESINDEX, body={
                "query": {
                    "match_all": {}
                },
                "fields": ["_id"]
            })

            doc_ids = [hit["_id"] for hit in result["hits"]["hits"]]

            randomId = random.choice(doc_ids)
            resp = client.delete(index=ESINDEX, id=randomId)

            return {'status': 'delete successful','id': randomId}
        except:
            return {'status': 'failed'}

api.add_resource(BabyName, '/babynames')

if __name__ == '__main__':
    csvReader()
    app.run(debug=True, host="0.0.0.0", port=5000)
    print("endpoint: ",ESENDPOINT)
    print("password: ",ESPASSWORD)
    print("indexName: ",ESINDEX)

# def startConnection():
#     num = 0
#     while True:
#         try:
#             num+=1
#             body = '{"brth_yr": 2011, "gndr": "FEMALE", "ethcty": "HISPANIC"}'
#             # Crea una instancia del cliente apuntando al host de Elasticsearch a través de HTTP
#             json_object = json.loads(body)
#             client = Elasticsearch("http://"+ESENDPOINT+":9200", basic_auth=("elastic", ESPASSWORD), verify_certs=False)
#             resp = client.index(index=ESINDEX, id=num, document=json_object)
#             # Realiza una operación de prueba
#             client.info().body
#             print("connection successful")
#         except ConnectionError as e:
#             print("Error de conexion: ", str(e))
