-- MySQL Script generated by MySQL Workbench
-- Fri Mar  3 15:32:07 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema weather
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `weather` ;

-- -----------------------------------------------------
-- Schema weather
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `weather` ;
USE `weather` ;

-- -----------------------------------------------------
-- Table `weather`.`country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `weather`.`country` ;

CREATE TABLE IF NOT EXISTS `weather`.`country` (
  `countryCode` VARCHAR(2) NULL DEFAULT NULL,
  `countryName` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`countryCode`));


-- -----------------------------------------------------
-- Table `weather`.`state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `weather`.`state` ;

CREATE TABLE IF NOT EXISTS `weather`.`state` (
  `stateCode` VARCHAR(2) NULL DEFAULT NULL,
  `stateName` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`stateCode`));


-- -----------------------------------------------------
-- Table `weather`.`station`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `weather`.`station` ;

CREATE TABLE IF NOT EXISTS `weather`.`station` (
  `idstation` VARCHAR(11) NULL DEFAULT NULL,
  `latitude` REAL NULL DEFAULT NULL,
  `longitude` REAL NULL DEFAULT NULL,
  `elevation` REAL NULL DEFAULT NULL,
  `stateCode` VARCHAR(2) NULL DEFAULT NULL,
  `stationName` VARCHAR(100) NULL DEFAULT NULL,
  `gsnFlag` VARCHAR(3) NULL DEFAULT NULL,
  `hcnCrnFlag` VARCHAR(3) NULL DEFAULT NULL,
  `wmold` VARCHAR(50) NULL DEFAULT NULL,
  `countryCode` VARCHAR(2) NULL DEFAULT NULL,
  PRIMARY KEY (`idstation`),
  INDEX `stationXcountry` (`countryCode` ASC) VISIBLE,
  INDEX `stationXstate` (`stateCode` ASC) VISIBLE,
  CONSTRAINT `stationXcountry`
    FOREIGN KEY (`countryCode`)
    REFERENCES `weather`.`country` (`countryCode`),
  CONSTRAINT `stationXstate`
    FOREIGN KEY (`stateCode`)
    REFERENCES `weather`.`state` (`stateCode`));


-- -----------------------------------------------------
-- Table `weather`.`textFile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `weather`.`textFile` ;

CREATE TABLE IF NOT EXISTS `weather`.`textFile` (
  `fileName` VARCHAR(50) NULL DEFAULT NULL,
  `url` VARCHAR(100) NULL DEFAULT NULL,
  `processedDay` DATE NULL DEFAULT NULL,
  `fileMd5` VARCHAR(130) NULL DEFAULT NULL,
  `fileStatus` VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (`fileName`));

USE `weather` ;

-- -----------------------------------------------------
-- procedure createstation
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`createstation`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE createstation (idstationVar VARCHAR(11), latitudeVar REAL, longitudeVar REAL,
											elevationVar REAL, stateCodeVar VARCHAR(2), stationNameVar VARCHAR(100),
											gsnFlagVar VARCHAR(3), hcnCrnFlagVar VARCHAR(3), wmoldVar VARCHAR(50),
											countryCodeVar VARCHAR(2))
BEGIN
	#Verifies if there is an important value in NULL
	IF idstationVar IS NULL OR stationNameVar IS NULL OR countryCodeVar IS NULL THEN
			SELECT "There are values NULL";
	#Verifies if the station already exists
	ELSEIF (SELECT COUNT(*) FROM station WHERE idstation = idstationVar) THEN
			SELECT "The station already exists";
	#Verifies if the state exists, if there is a state
	ELSEIF (SELECT COUNT(*) FROM state WHERE stateCode = stateCodeVar) = 0 AND 
			stateCodeVar IS NOT NULL THEN
			SELECT "There is no state with that code";
	#Verifies if the country exists
	ELSEIF (SELECT COUNT(*) FROM country WHERE countryCode = countryCodeVar) = 0 THEN
			SELECT "There is no country with that code";
	#Verifies if there is a station with the same code
	ELSEIF (SELECT COUNT(*) FROM station WHERE idstation = idstationVar) != 0 THEN
			SELECT "The station already exists";
	ELSE 
		INSERT INTO station (idstation, latitude, longitude, elevation, stateCode, 
									stationName, gsnFlag, hcnCrnFlag, wmold, countryCode)
						VALUES(idstationVar, latitudeVar, longitudeVar, elevationVar, 
									stateCodeVar, stationNameVar, gsnFlagVar, hcnCrnFlagVar,
									wmoldVar, countryCodeVar);
		SELECT "The station has been created";
	END IF;

END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createcountry
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`createcountry`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE createcountry (countryCodeVar VARCHAR(2), countryNameVar VARCHAR(100))
BEGIN
	IF ISNULL(countryCodeVar) OR ISNULL(countryNameVar) THEN
		SELECT "There are values NULL";
	ELSEIF (SELECT COUNT(*) FROM country WHERE countryCode = countryCodeVar) != 0 THEN
		SELECT "The country already exists"; 
	ELSE 
		INSERT INTO country (countryCode, countryName)
				VALUES (countryCodeVar, countryNameVar);
		SELECT "The country has been created";
	END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createstate
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`createstate`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE createstate (stateCodeVar VARCHAR(2), stateNameVar VARCHAR(100))
BEGIN
	IF ISNULL(stateCodeVar) OR ISNULL(stateNameVar) THEN 
		SELECT "There are values NULL";
	ELSEIF (SELECT COUNT(*) FROM state WHERE stateCode = stateCodeVar) != 0 THEN
		SELECT "The state already exists";
	ELSE
		INSERT INTO state (stateCode, stateName)
				VALUES (stateCodeVar, stateNameVar);
		SELECT "The state has been created";
	END IF;

END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createTextFile
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`createTextFile`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE createTextFile (fileNameVAR VARCHAR(50), urlVAR VARCHAR(100),
										fileMd5VAR VARCHAR(130), fileStatusVar VARCHAR(20))
BEGIN
	IF ISNULL(fileNameVAR) OR ISNULL(urlVAR) THEN 
		SELECT "There are values NULL";
	ELSEIF (SELECT COUNT(*) FROM textFile WHERE fileName = fileNameVAR) != 0 THEN
		SELECT "The File already exists";
	ELSE
		INSERT INTO textFile (FileName, url, fileMd5, fileStatus, processedDay)
									VALUES (fileNameVar, urlVar, fileMd5Var, fileStatusVar, (SELECT DATE(NOW())));
											#(SELECT DATE_FORMAT(NOW(), "%m-%d-%Y")));
		SELECT "The file has been created";
	END IF;

END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readstation
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`readstation`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE readstation (idstationVar VARCHAR(11), stateCodeVar VARCHAR(2), 
										stationNameVar VARCHAR(100), countryCodeVar VARCHAR(2))
BEGIN

		IF ( SELECT COUNT(*) FROM station WHERE idstation = IFNULL(idstationVar, idstation) 
														AND stationName = IFNULL(stationNameVar, stationName) 
														AND countryCode = IFNULL(countryCodeVar, countryCode) 
														AND (stateCode = IFNULL(stateCodeVar, stateCode) OR ISNULL(stateCode))) = 0 THEN
				SELECT "There is no station with those specifications " AS "Result";
		ELSE
			SELECT idstation, stationName, countryCode, Latitude, longitude, elevation, stateCode, gsnFlag, hcnCrnFlag, wmold
					FROM station WHERE idstation = IFNULL(idstationVar, idstation) AND 
											stationName = IFNULL(stationNameVar, stationName) AND
											countryCode = IFNULL(countryCodeVar, countryCode) AND
											(stateCode = IFNULL(stateCodeVar, stateCode) OR ISNULL(stateCode));
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readcountry
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`readcountry`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE readcountry (countryCodeVar VARCHAR(2), countryNameVar VARCHAR(100))
BEGIN
		IF (SELECT COUNT(*) FROM country WHERE countryCode = IFNULL(countryCodeVar, countryCode) 
													AND countryName = IFNULL(countryNameVar, countryName)) = 0 THEN
			SELECT "There is no country with those specifications " AS "Result";
		ELSE
			SELECT countryCode, countryName FROM country 
				WHERE countryCode = IFNULL(countryCodeVar, countryCode) AND
						countryName = IFNULL(countryNameVar, countryName);
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readstate
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`readstate`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE readstate (stateCodeVar VARCHAR(2), stateNameVar VARCHAR(100))
BEGIN
		IF (SELECT COUNT(*) FROM state WHERE stateCode = IFNULL(stateCodeVar, stateCode) 
													AND stateName = IFNULL(stateNameVar, stateName)) = 0 THEN
			SELECT "There is no state with those specifications " AS "Result";
		ELSE
			SELECT stateCode, stateName FROM state 
				WHERE stateCode = IFNULL(stateCodeVar, stateCode) AND
						stateName = IFNULL(stateNameVar, stateName);
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readTextFile
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`readTextFile`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE readTextFile ( fileNameVAR VARCHAR(50), urlVAR VARCHAR(100),
										fileStatusVar VARCHAR(20))
BEGIN
		IF (SELECT COUNT(*) FROM textFile WHERE fileName = IFNULL(fileNameVAR, fileName) AND
													url = IFNULL(urlVAR, url) AND 
													fileStatus = IFNULL(fileStatusVar, fileStatus)) = 0 THEN
			SELECT "There is no file with those specifications " AS "Result";
		ELSE
			SELECT fileName, url, fileMd5, fileStatus, processedDay FROM textFile 
					WHERE fileName = IFNULL(fileNameVAR, fileName) 
					AND url = IFNULL(urlVAR, url) AND fileStatus = IFNULL(fileStatusVar, fileStatus);
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updatestation
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`updatestation`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE updatestation (idstationVar VARCHAR(11), latitudeVar REAL, longitudeVar REAL,
											elevationVar REAL, stateCodeVar VARCHAR(2), stationNameVar VARCHAR(100),
											gsnFlagVar VARCHAR(3), hcnCrnFlagVar VARCHAR(3), wmoldVar VARCHAR(50),
											countryCodeVar VARCHAR(2))
BEGIN 
	# an id is required to modify
	IF (idstationVar IS NULL) THEN 
		SELECT "You must enter the id to be able to modify the station." AS "Result";
	# check that the station exists	
	ELSEIF (SELECT COUNT(*) FROM station WHERE station.idstation = idstationVar) = 0 THEN
		SELECT "The station does not exist." AS "Result";
	# check that the country exists	
	ELSEIF (SELECT COUNT(*) FROM country WHERE country.countryCode = countryCodeVar) = 0 THEN
		SELECT "The new country does not exist." AS "Result";
	# check that the state exists
	ELSEIF (SELECT COUNT(*) FROM state WHERE state.stateCode = stateCodeVar) = 0 THEN
		SELECT "The new state does not exist." AS "Result";
	# the desired data is modified
	ELSE
		UPDATE station SET station.latitude = IFNULL(latitudeVar, station.latitude),
        station.longitude = IFNULL(longitudeVar, station.longitude),
        station.elevation = IFNULL(elevationVar, station.elevation),
        station.stateCode = IFNULL(stateCodeVar, station.stateCode),
        station.stationName = IFNULL(stationNameVar, station.stationName),
        station.gsnFlag = IFNULL(gsnFlagVar, station.gsnFlag),
        station.hcnCrnFlag = IFNULL(hcnCrnFlagVar, station.hcnCrnFlag),
        station.wmold = IFNULL(wmoldVar, station.wmold),
        station.countryCode = IFNULL(countryCodeVar, station.countryCode)
        
        
        WHERE station.idstation = idstationVar;
        SELECT "The station has been successfully modified.";
	END IF;
	
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updatecountry
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`updatecountry`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE updatecountry (countryCodeVar VARCHAR(2), countryNameVar VARCHAR(100))
BEGIN 
	# an id is required to modify
	IF (countryCodeVar IS NULL) THEN 
		SELECT "You must enter the id to be able to modify the country." AS "Result";
	# check that the country exists	
	ELSEIF (SELECT COUNT(*) FROM country WHERE country.countryCode = countryCodeVar) = 0 THEN
		SELECT "The country does not exist." AS "Result";
	# check that the country name does not exists	
	ELSEIF (SELECT COUNT(*) FROM country WHERE country.countryName = countryNameVar) = 1 THEN
		SELECT "The new country name already exist." AS "Result";
	# the desired data is modified
	ELSE
		UPDATE country SET country.countryName = IFNULL(countryNameVar, country.countryName)  
        
        WHERE country.countryCode = countryCodeVar;
        SELECT "The country has been successfully modified.";
	END IF;
	
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updatestate
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`updatestate`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE updatestate (stateCodeVar VARCHAR(2), stateNameVar VARCHAR(100))
BEGIN 
	# an id is required to modify
	IF (stateCodeVar IS NULL) THEN 
		SELECT "You must enter the id to be able to modify the country." AS "Result";
	# check that the country exists	
	ELSEIF (SELECT COUNT(*) FROM state WHERE state.stateCode = stateCodeVar) = 0 THEN
		SELECT "The state does not exist." AS "Result";
	# check that the state name does not exists	
	ELSEIF (SELECT COUNT(*) FROM state WHERE state.stateName = stateNameVar) = 1 THEN
		SELECT "The new state name already exist." AS "Result";
	# the desired data is modified
	ELSE
		UPDATE state SET state.stateName = IFNULL(stateNameVar, state.stateName)  
        
        WHERE state.stateCode = stateCodeVar;
        SELECT "The state has been successfully modified.";
	END IF;
	
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateTextFile
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`updateTextFile`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE updateTextFile (fileNameVAR VARCHAR(100), urlVAR VARCHAR(100), processedDayVar DATE,
										fileMd5VAR VARCHAR(130), fileStatusVAR VARCHAR(20))
BEGIN 
	# an id is required to modify
	IF (fileNameVAR IS NULL) THEN 
		SELECT "You must enter the fileName to be able to modify the country." AS "Result";
	# check that the textFile exists	
	ELSEIF (SELECT COUNT(*) FROM textfile WHERE textfile.fileName = fileNameVAR) = 0 THEN
		SELECT "The textFile does not exist." AS "Result";
	# check that the new url does not exists	
	ELSEIF (SELECT COUNT(*) FROM textfile WHERE textfile.url = urlVAR) = 1 THEN
		SELECT "The new url already exist." AS "Result";
	# the desired data is modified
	ELSE
		UPDATE textfile SET textfile.url = IFNULL(urlVAR, textfile.url),  
			textfile.processedDay = IFNULL(processedDayVar, textfile.processedDay),
			textfile.fileMd5 = IFNULL(fileMd5VAR, textfile.fileMd5),
			textfile.fileStatus = IFNULL(fileStatusVAR, textfile.fileStatus)
        
        WHERE textfile.fileName = fileNameVAR;
        SELECT "The textFile has been successfully modified.";
	END IF;
	
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletestation
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`deletestation`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE deletestation (idstationV INT)
BEGIN
	DECLARE message VARCHAR(60);
    # error handling - fk
	DECLARE EXIT HANDLER FOR 1451 
		SELECT "ERROR - The station cannot be deleted." AS Result;
    
    IF (idstationV IS NULL) THEN
		SET message = "ERROR - Cannot enter null data";
	ELSEIF (SELECT COUNT(*) FROM station WHERE station.idstation = idstationV) = 0 THEN
		SET message = "ERROR - There is no station with the entered id.";
	ELSE
		DELETE FROM station WHERE station.idstation = idstationV;
		SET message = "Delete successfully.";
	END IF;
    SELECT message AS Result;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecountry
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`deletecountry`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE deletecountry (countryCodeV VARCHAR(2))
BEGIN
	DECLARE message VARCHAR(60);
    # error handling - fk
	DECLARE EXIT HANDLER FOR 1451 
		SELECT "ERROR - The country cannot be deleted." AS Result;
    
    IF (countryCodeV IS NULL) THEN
		SET message = "ERROR - Cannot enter null data";
	ELSEIF (SELECT COUNT(*) FROM country WHERE country.countryCode = countryCodeV) = 0 THEN
		SET message = "ERROR - There is no country with the entered code.";
	ELSE
		DELETE FROM country WHERE country.countryCode = countryCodeV;
		SET message = "Delete successfully.";
	END IF;
    SELECT message AS Result;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletestate
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`deletestate`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE deletestate (stateCodeV VARCHAR(2))
BEGIN
	DECLARE message VARCHAR(60);
    # error handling - fk
	DECLARE EXIT HANDLER FOR 1451 
		SELECT "ERROR - The state cannot be deleted." AS Result;
    
    IF (stateCodeV IS NULL) THEN
		SET message = "ERROR - Cannot enter null data";
	ELSEIF (SELECT COUNT(*) FROM state WHERE state.stateCode = stateCodeV) = 0 THEN
		SET message = "ERROR - There is no state with the entered code.";
	ELSE
		DELETE FROM state WHERE state.stateCode = stateCodeV;
		SET message = "Delete successfully.";
	END IF;
    SELECT message AS Result;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteTextFile
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`deleteTextFile`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE deleteTextFile (fileNameV VARCHAR(50))
BEGIN
	DECLARE message VARCHAR(60);
    # error handling - fk
	DECLARE EXIT HANDLER FOR 1451 
		SELECT "ERROR - The textFile cannot be deleted." AS Result;
    
    IF (fileNameV IS NULL) THEN
		SET message = "ERROR - Cannot enter null data";
	ELSEIF (SELECT COUNT(*) FROM textfile WHERE textfile.fileName = fileNameV) = 0 THEN
		SET message = "ERROR - There is no textFile with the entered file name.";
	ELSE
		DELETE FROM textfile WHERE textfile.fileName = fileNameV;
		SET message = "Delete successfully.";
	END IF;
    SELECT message AS Result;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loadFile
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`loadFile`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE loadFile (fileNameVar VARCHAR(50), urlVar VARCHAR(100), fileMd5Var VARCHAR(130), 
									fileStatusVar VARCHAR(20))
BEGIN
		IF ISNULL(fileNameVar) OR ISNULL(urlVar) OR ISNULL(fileMd5Var) OR ISNULL(fileStatusVar) THEN
			SELECT "There are values NULL";
		ELSEIF (SELECT COUNT(*) FROM textFile WHERE fileName = fileNameVar) = 0 THEN
			CALL createTextFile(fileNameVar, urlVar, fileMd5Var, fileStatusVar);
			SELECT "The file has been created";
		ELSEIF (SELECT fileMd5 FROM textFile WHERE fileName = fileNameVar) = fileMd5Var THEN
			#CALL createTextFile(fileNameVar, urlVar, fileMd5Var, fileStatusVar);country
			SELECT "The file has no changes";
		ELSE
			CALL updateTextFile(fileNameVar, NULL, (SELECT DATE(NOW())), fileMd5Var, fileStatusVar);
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loadFileFolder
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`loadFileFolder`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE loadFileFolder (fileNameVar VARCHAR(50), urlVar VARCHAR(100), fileMd5Var VARCHAR(130), 
												fileStatusVar VARCHAR(20))
BEGIN
		IF ISNULL(fileNameVar) OR ISNULL(urlVar) OR ISNULL(fileStatusVar) THEN
			SELECT "There are values NULL";
		ELSEIF (SELECT COUNT(*) FROM textFile WHERE fileName = fileNameVar) = 0 THEN
			CALL createTextFile(fileNameVar, urlVar, fileMd5Var, fileStatusVar);
			SELECT "The file has been created";
		# md5 will never be the same because, NULL is always passed
		ELSEIF (SELECT fileMd5 FROM textFile WHERE fileName = fileNameVar) = fileMd5Var THEN
			SELECT "The file has no changes";
		ELSE
			CALL updateTextFile(fileNameVar, NULL, (SELECT DATE(NOW())), NULL, fileStatusVar);
		END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sameFolderFileMD5
-- -----------------------------------------------------

USE `weather`;
DROP procedure IF EXISTS `weather`.`sameFolderFileMD5`;

DELIMITER $$
USE `weather`$$
CREATE PROCEDURE sameFolderFileMD5 (fileNameVar VARCHAR(50), fileMd5Var VARCHAR(10000), OUT sameMD5 INT)
BEGIN
		IF ISNULL(fileNameVar) THEN
			SET sameMD5 = 1;
		ELSEIF (SELECT COUNT(*) FROM textFile WHERE fileName = fileNameVar) = 0 THEN
			SET sameMD5 = 1;
		ELSEIF (SELECT fileMd5 FROM textFile WHERE fileName = fileNameVar) = fileMd5Var THEN
			SET sameMD5 = 1;
			CALL updateTextFile(fileNameVar, NULL, NULL, NULL, "PROCESSED");
		ELSE
			SET sameMD5 = 0;
			CALL updateTextFile(fileNameVar, NULL, NULL, fileMd5Var, "DOWNLOADED");
		END IF;

END;$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
