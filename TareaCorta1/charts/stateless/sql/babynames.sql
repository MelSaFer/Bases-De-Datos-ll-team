-- MySQL Script generated by MySQL Workbench
-- Fri Mar 17 16:53:03 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema babynames
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `babynames` ;

-- -----------------------------------------------------
-- Schema babynames
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `babynames` DEFAULT CHARACTER SET latin1 ;
USE `babynames` ;

-- -----------------------------------------------------
-- Table `babynames`.`babyname`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `babynames`.`babyname` ;

CREATE TABLE IF NOT EXISTS `babynames`.`babyname` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `birthyear` INT(11) NULL DEFAULT NULL,
  `gender` VARCHAR(10) NULL DEFAULT NULL,
  `ethnicity` VARCHAR(50) NULL DEFAULT NULL,
  `bbyName` VARCHAR(50) NULL DEFAULT NULL,
  `cnt` INT(11) NULL DEFAULT NULL,
  `rnk` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;

USE `babynames` ;

-- -----------------------------------------------------
-- procedure sp_BabyName_Delete
-- -----------------------------------------------------

USE `babynames`;
DROP procedure IF EXISTS `babynames`.`sp_BabyName_Delete`;

DELIMITER $$
USE `babynames`$$
CREATE PROCEDURE `sp_BabyName_Delete`(
   p_id INT
)
BEGIN
  DELETE FROM BabyName
  WHERE id = p_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_BabyName_Insert
-- -----------------------------------------------------

USE `babynames`;
DROP procedure IF EXISTS `babynames`.`sp_BabyName_Insert`;

DELIMITER $$
USE `babynames`$$
CREATE PROCEDURE `sp_BabyName_Insert`(
   p_birthyear INT,
   p_gender VARCHAR(10),
   p_ethnicity VARCHAR(50),
   p_bbyName VARCHAR(50),
   p_cnt INT,
   p_rnk INT
)
BEGIN
  INSERT INTO BabyName (birthyear, gender, ethnicity, bbyName, cnt, rnk)
  VALUES (p_birthyear, p_gender, p_ethnicity, p_bbyName, p_cnt, p_rnk);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_BabyName_Select
-- -----------------------------------------------------

USE `babynames`;
DROP procedure IF EXISTS `babynames`.`sp_BabyName_Select`;

DELIMITER $$
USE `babynames`$$
CREATE PROCEDURE `sp_BabyName_Select`(
   p_id INT
)
BEGIN
  SELECT *
  FROM BabyName
  WHERE id = p_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_BabyName_Update
-- -----------------------------------------------------

USE `babynames`;
DROP procedure IF EXISTS `babynames`.`sp_BabyName_Update`;

DELIMITER $$
USE `babynames`$$
CREATE PROCEDURE `sp_BabyName_Update`(
   p_id INT,
   p_birthyear INT,
   p_gender VARCHAR(10),
   p_ethnicity VARCHAR(50),
   p_bbyName VARCHAR(50),
   p_cnt INT,
   p_rnk INT
)
BEGIN
  UPDATE BabyName
  SET birthyear = p_birthyear,
      gender = p_gender,
      ethnicity = p_ethnicity,
      bbyName = p_bbyName,
      cnt = p_cnt,
      rnk = p_rnk
  WHERE id = p_id;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
